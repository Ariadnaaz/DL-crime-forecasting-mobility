# -*- coding: utf-8 -*-
"""2.Assign_grid_cell_crime_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13kc5cn4JgVjKMzjuSbMZuUDJf5qFAc6W
"""

!pip install pandarallel
!pip install gTTS

#import osmnx as ox
#import networkx as nx
from shapely.geometry import Point, LineString
import shapely.geometry

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import geopandas as gpd
import numpy as np
import folium
from IPython.display import display

from pandarallel import pandarallel
from pathlib import Path
from IPython.display import Audio
import os
pandarallel.initialize(nb_workers=min(os.cpu_count(), 12),progress_bar=True)

import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount('/content/drive')

from gtts import gTTS #Import Google Text to Speech
tts = gTTS('Code finished, bitch!') #Provide the string to convert to speech
tts.save('done.wav') #save the string converted to speech as a .wav file

"""### Useful functions"""

def extract_multipolygon_city(file_path,city_name):
    '''
    Extracts the entry in the geojson file corresponding to the city selected and outputs the
    corresponding geodataframe with the multipolygon.

        Parameters:
            file_path (str): File path to the geojson
            city_name (str): Name of the city we selected

        Returns:
            feature (geopandas): The geopandas dataframe for that city
    '''
    d = pd.read_json(file_path)
    for feature in d["features"]:
        if feature[0]['properties']['city'] == city_name:
            return gpd.GeoDataFrame.from_features(feature)

def generate_grid(selected_city,grid_size,plot=True):
  gdf = extract_multipolygon_city(file_path='drive/MyDrive/PhD_thesis/Crime_data/city_multipolygons.geojson',city_name=selected_city)

  bbox = gdf.total_bounds
  min_lon, min_lat, max_lon, max_lat = (bbox[2],bbox[1],bbox[0],bbox[3])

  lon = np.linspace(min_lon, max_lon, grid_size+1)
  lat = np.linspace(min_lat, max_lat, grid_size+1)

  latlons = []
  for i in range(len(lat)-1):
      for k in range(len(lon)-1):
          latlons.append((lat[k], lon[i], lat[k+1], lon[i+1]))

  if plot==True:
    m = folium.Map(location=((min_lat+max_lat)/2,(min_lon+max_lon)/2), zoom_start=11)
    for k in latlons:
        folium.Rectangle([(k[0], k[1]), (k[2], k[3])],
                        color='red',
                        fill='pink',
                        fill_opcity=0.5).add_to(m)
    cgeo = (
            gdf.set_crs("epsg:4326")
            .sample(1)
            .pipe(lambda d: d.to_crs(d.estimate_utm_crs()))["geometry"]
            #.centroid.buffer(10000)
            .to_crs("epsg:4326")
            .__geo_interface__
        )

    geo_j = folium.GeoJson(data=cgeo)
    geo_j.add_to(m)
    display(m)
    return (min_lon, min_lat, max_lon, max_lat, latlons)
  else:
    return (min_lon, min_lat, max_lon, max_lat, latlons)

# EXAMPLE HOW TO USE TO PLOT: generate_grid(selected_city='Los Angeles',grid_size=50,plot=True)

"""### Generate crime files with grid number"""

def find_polygon(row,df):
    for p_idx,elem in df.iterrows():
      if elem['polygon'].contains(Point(row['longitude'],row['latitude'])):
        polygon_num = p_idx
        break
    return pd.Series({'cell': polygon_num})

def generate_crime_files_with_grid_num(city_name,city_folder,crimes_list,output_folder,grid_size=50):

  # load crime dataset for that city
  df_crimes = pd.read_csv(f'drive/MyDrive/PhD_thesis/Crime_data/Crime_data_outputs/5_years/{city_folder}_selected_crimes_clean_all.csv',index_col=0)

  # generate grid boxes
  min_lon, min_lat, max_lon, max_lat, grid_bboxes = generate_grid(selected_city=city_name,grid_size=grid_size,plot=False)

  # turn boxes into polygons and that list into a dataframe
  polygon_list = []
  for elem in grid_bboxes:
    polygon = shapely.geometry.box(elem[1],elem[0],elem[3],elem[2],ccw=True)
    polygon_list.append(polygon)
  df_poly = pd.DataFrame(polygon_list,columns=['polygon'])

  # generate file for each crime
  for crime in crimes_list:
    print("Crime type: ", crime)
    df_crime = df_crimes.copy()
    df_crime = df_crime[df_crime['crime_type'] == crime]
    df_crime.reset_index(drop=True,inplace=True)
    print(f"Shape dataset after selecting only {crime}: ", df_crime.shape)

    print("Finding the grid cell for each point...")
    df_final = df_crime.merge(df_crime.parallel_apply(find_polygon,df=df_poly,axis=1),left_index=True, right_index= True)

    # make final output folder if it doesn't exist
    #Path(f"drive/MyDrive/PhD_thesis/Crime_data/{output_folder}").mkdir(exist_ok=True)

    # save final dataset
    df_final.to_csv(f'drive/MyDrive/PhD_thesis/Crime_data/Crime_data_outputs/{output_folder}/{city_folder}_{crime}_clean_all_grid.csv')
    print("Final dataset saved!\n")

generate_crime_files_with_grid_num(city_name = 'Baltimore',
                                   city_folder = 'Baltimore',
                                   crimes_list = ['Burglary', 'Motor Vehicle Theft', 'Assault', 'Robbery', 'Homicide'],
                                   output_folder = 'Grid_cells_0.2gu/Clean_all_grid',
                                   grid_size=39,
                                   )

generate_crime_files_with_grid_num(city_name = 'Chicago',
                                   city_folder = 'Chicago',
                                   crimes_list = ['Robbery', 'Homicide','Motor Vehicle Theft', 'Assault'], # 'Burglary',
                                   #input_folder = 'Crime_data_outputs',
                                   output_folder = 'Grid_cells_0.2gu/Clean_all_grid',
                                   grid_size=85,
                                   )

generate_crime_files_with_grid_num(city_name = 'Los Angeles',
                                   city_folder = 'Los_Angeles',
                                   crimes_list = ['Burglary', 'Motor Vehicle Theft', 'Assault', 'Robbery', 'Homicide'],
                                   #input_folder = 'Crime_data_outputs',
                                   output_folder = 'Grid_cells_0.2gu/Clean_all_grid',
                                   grid_size=133,
                                   )
#Audio('done.wav', autoplay=True)

generate_crime_files_with_grid_num(city_name = 'Philadelphia',
                                   city_folder = 'Philadelphia',
                                   crimes_list = ['Burglary', 'Motor Vehicle Theft', 'Assault', 'Robbery', 'Homicide'],
                                   #input_folder = 'Crime_data_outputs',
                                   output_folder = 'Grid_cells_0.2gu/Clean_all_grid',
                                   grid_size=64,
                                   )